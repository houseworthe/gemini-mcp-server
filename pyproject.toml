[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gemini-mcp"
version = "1.0.0"
description = "A Model Context Protocol (MCP) server that integrates Google's Gemini AI into Claude Code"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Ethan Houseworth"}
]
keywords = ["mcp", "gemini", "ai", "claude", "llm", "api"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "mcp>=0.1.0",
    "google-generativeai>=0.7.0",
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/ethanhouseworth1/gemini-mcp"
Repository = "https://github.com/ethanhouseworth1/gemini-mcp"
Issues = "https://github.com/ethanhouseworth1/gemini-mcp/issues"
Documentation = "https://github.com/ethanhouseworth1/gemini-mcp#readme"

[project.scripts]
gemini-mcp = "server:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "ruff>=0.1.0",
    "black>=23.0",
    "mypy>=1.0",
    "bandit[toml]>=1.7",
    "safety>=2.3",
]

[tool.setuptools]
packages = ["gemini_mcp"]
package-dir = {"gemini_mcp" = "."}

[tool.setuptools.package-data]
gemini_mcp = ["*.md", "requirements.txt"]

[tool.ruff]
line-length = 88
target-version = "py38"
extend-exclude = ["gemini-mcp/", "test_server.py"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.isort]
known-first-party = ["gemini_mcp"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --cov=server --cov-report=term-missing"

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "setup.py",
    "__pycache__/*",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101"]  # Skip assert_used test